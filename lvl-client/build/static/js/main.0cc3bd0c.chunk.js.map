{"version":3,"sources":["serviceWorker.js","actions/index.js","components/Login.js","components/PrivateRoute.js","components/Protected.js","App.js","reducers/index.js","index.js"],"names":["Boolean","window","location","hostname","match","getData","axios","get","headers","Authorization","localStorage","getItem","then","res","console","log","data","catch","err","Login","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","credentials","username","password","handleChanges","e","setState","objectSpread","defineProperty","target","name","value","login","preventDefault","props","history","push","inherits","createClass","key","react_default","a","createElement","onSubmit","type","onChange","Component","connect","creds","dispatch","post","setItem","token","payload","PrivateRoute","_ref","component","rest","objectWithoutProperties","Route","assign","render","Redirect","to","Protected","App","BrowserRouter","className","Link","path","components_PrivateRoute","exact","initialState","isLoggingIn","friends","error","lvlReducer","undefined","action","store","createStore","reducer","applyMiddleware","thunk","logger","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0cc3bd0c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\r\n\r\nexport const LOGIN_START = \"LOGIN_START\";\r\n\r\nexport const FETCH_REQUEST = \"FETCH_REQUEST\";\r\nexport const FETCH_SUCCESS = \"FETCH_SUCCESS\";\r\nexport const FETCH_FAILURE = \"FETCH_FAILURE\";\r\n\r\nexport const login = creds => dispatch => {\r\n    dispatch({ type: LOGIN_START});\r\n    return axios.post('https://bw-designyourlife-api.herokuapp.com/api/auth/login', creds) \r\n        .then(res => {\r\n            console.log(res.data)\r\n            localStorage.setItem(\"token\", res.data.token);\r\n            dispatch({ type:\"LOGIN_SUCCESS\", payload: res.data.payload});\r\n            getData();\r\n\r\n    })\r\n    .catch(err => {\r\n        console.log(err);\r\n    });\r\n\r\n};\r\n\r\nexport const getData = () => {\r\n    axios\r\n        .get('https://bw-designyourlife-api.herokuapp.com/testDb', {\r\n            headers: { Authorization: localStorage.getItem(\"token\") }\r\n        })\r\n        .then (res => {\r\n            console.log(res.data);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../actions';\r\n\r\nexport class Login extends Component {\r\n    state = {\r\n        credentials: {\r\n            username: \"\",\r\n            password: \"\",\r\n        }\r\n    };\r\n\r\n    handleChanges = e => {\r\n        this.setState({\r\n            credentials: {\r\n                ...this.state.credentials,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        })\r\n    };\r\n\r\n    login = e => {\r\n        e.preventDefault();\r\n        this.props.login(this.state.credentials).then(() => {\r\n            this.props.history.push(\"/protected\");\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.login}>\r\n                    <input\r\n                        type=\"text\"\r\n                        name= \"username\"\r\n                        value={this.state.credentials.username}\r\n                        onChange={this.handleChanges}\r\n                    />\r\n\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        value={this.state.credentials.password}\r\n                        onChange={this.handleChanges}\r\n                    />\r\n\r\n                    <button> Log In </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    { login }\r\n)(Login);","import React from 'react'\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    return (\r\n        <Route\r\n        {...rest}\r\n        render={props =>\r\n        localStorage.getItem(\"token\") ? (\r\n            <Component {...props} />\r\n        ) : (\r\n            <Redirect to=\"/login\" />\r\n        )\r\n        }\r\n        />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;","import React, { Component } from \"react\";\r\n\r\nexport class Protected extends Component {\r\n    componentDidMount() {}\r\n\r\n        render() {\r\n            return (\r\n            <div>\r\n                <h2>Login successful</h2>\r\n            </div>\r\n            );\r\n        }\r\n        }\r\n\r\nexport default Protected;","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Login from './components/Login';\nimport PrivateRoute from './components/PrivateRoute';\nimport Protected from './components/Protected';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <h1> LVL  </h1>\n\n          <ul>\n            <li>\n              <Link to=\"\"> (Public) </Link>\n            </li>\n            <li>\n              <Link to=\"/protected\"> Protected </Link>\n            </li>\n            <li>\n              <Link to=\"/login\"> Log In</Link>\n            </li>\n            <li>\n              <Link to=\"/register\">Register</Link>\n            </li>\n          </ul>\n          {/* <Route exact path='/' component={App} /> */}\n          <Route path=\"/login\" component={Login} />\n          <PrivateRoute exact path=\"/protected\" component={Protected} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import { FETCH_REQUEST, FETCH_SUCCESS, FETCH_FAILURE } from \"../actions\";\r\n\r\nconst initialState = {\r\n    isLoggingIn: false,\r\n    friends: [],\r\n    error: null,\r\n\r\n};\r\n\r\n\r\n\r\nexport const lvlReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoggingIn: true,\r\n                error: \"\",\r\n            };\r\n        case FETCH_SUCCESS:\r\n            return {\r\n                ...state,\r\n                friends: action.payload,\r\n                isLoggingIn: false,\r\n                error: \"\",\r\n            };\r\n        case FETCH_FAILURE:\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                isLoggingIn: false,\r\n            };\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default lvlReducer;","import * as serviceWorker from './serviceWorker';\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport reducer from \"./reducers\";\n\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\n\nconst store = createStore( reducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}